---
title: "Lab 6 BIMM 143: R Functions"
author: "Shreyas Sankaranarayanan"
format: pdf
toc: false
---

This week we are introducing **R Functions** and how to write our own R functions

Questions to answer:

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should beadquately explained with code comments and be able to work on an example class gradebooksuch as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Follow the guidelines from class

-Write a working code snippet that solves simple problem:

```{r}
#Straight forward mean()
mean(student1)
```
We need to identify and drop the lowest score:

```{r}
# Which element of the vector is the lowest?
which.min(student1)
```
What we want is to drop said score and exclude it in our mean calculation.

```{r}
#Returns everything bu the eighth element of the vector
student1[-8]
```
We could also use `which.min()` to make it a generalization for all vectors:

```{r}
#removes minimum amount from mean calculation
mean(student1[-which.min(student1)])
```

Let's try the other example students:

We could try removing the "NA" values using `na.rm = TRUE` but this is unfair

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm = TRUE)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm = TRUE)
```

Another approach is to replace all "NA" values with zero.

First we need to find the NA elements of the vector.How do we find NA elements?

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
x<-student2

is.na(x)
which(is.na(x))
```

Now we have identified the "NA" elements, we want to replace them with 0:

```{r}
x[is.na(x)] <-0
x
mean(x)
```
Now we need to drop the lowest score now...

```{r}
x[is.na(x)] <-0
mean(x[-which.min(x)])
```
Now let's do the calculations for student3:

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
x<- student3
x[is.na(x)] <-0
mean(x[-which.min(x)])
```
## Now we make our function

We will now take the snippet from above and turn it into a function.

Every function has 3 parts:

- A name, in our case `grade()`
- Input arguments, a vector of student scores
- The body i.e. our working snippet of code

Using RStudio I will select `Code > Extract Function`

```{r}
grade <- function(x) {
  x[is.na(x)] <-0
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```
Now we need to add comments to explain to future users

```{r}
#' Calculate average for a vector of scores while dropping the lowest score. 
#'Missing values will be treated as zero.
#' @param x A numeric vector of homework scores
#'
#' @return Average score
#' @export
#'
#' @examples
#' student <- c(100,NA,90,97)
#' grade(student)
#' 
grade <- function(x) {
  #mask NA as zero
  #Treat missing values as zero
  x[is.na(x)] <-0
  #Exclude score from mean
  mean(x[-which.min(x)])
}
```

Now we can use this function to find the averages for all the students in the class. (The provided CSV file: “https://tinyurl.com/gradeinput”)

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
```

```{r}
apply(gradebook,1, grade)
```
> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
results <- apply(gradebook,1, grade)
sort(results)
```
We can see that student 18 is the top-scoring student with an average grade of 94.50 on all homework assignments with lowest grade dropped.

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
ave.scores <- apply(gradebook, 2, mean, na.rm=TRUE)
ave.scores
which.min(ave.scores)

```
```{r}
med.scores <- apply(gradebook, 2, median, na.rm=TRUE)
med.scores
which.min(med.scores)
```
```{r}
boxplot(gradebook)
```

According to the mean, we have that people generally did worse on HW 3 with an average score of 80.8. However, according to the median which accounts for outliers HW 2 has the lowest score of 72.5.

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


```{r}
masked.gradebook <- gradebook
masked.gradebook[is.na(masked.gradebook)] <- 0
masked.gradebook
```
Now we look at the correlation:

```{r}
cor(results, masked.gradebook$hw1)
```


```{r}
apply(masked.gradebook, 2, cor, x=results)
```

> Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown” Knit”) button to generate a PDF format report without errors. Finally, submit your PDF to gradescope. [1pt]

Completed if you are reading this!
