---
title: "Class 7 Machine Learning 1"
author: "Shreyas Sankaranarayanan"
format: pdf
toc: false
---

In this document we will start to explore some key achine learning methods. We will begin with clustering which involves finding groupings in data. We will then move on to dimensionality reduction.

## Clustering

Let's start with **"k-means"** clustering. The main functoin in Base R for this is `kmeans()`.

```{r}
# Make up some data
rnorm(1000, mean = 3)

```

```{r}
library(ggplot2)
tmp <- c(rnorm(30,-3), rnorm(30, +3))
x <- cbind(x = tmp, y= rev(tmp))
```

Now let's try the `kmeans()` algorithm

```{r}
km <- kmeans(x, 2)
km
```

> Q. How many points in each cluster?

```{r}
km$size
```

> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```


> Q. What are center/mean values of each cluster?

```{r}
km$centers
```


> Q. Make a plot of your data showing your clustering results (groupings clusters and cluster centers)

```{r}
plot(x, col = km$cluster)
points(km$centers, col = "dodgerblue4", pch = 15, cex = 1)
```

> Run `kmeans()` again and cluster in 4 groups and plot the results

First we run the `kmeans()` algorithm:

```{r}
km2 <- kmeans(x,4)
km2
```

Then we plot the corresponding 4 clusters:

```{r}
plot(x, col = km2$cluster)
points(km2$centers, col = "dodgerblue4", pch = 15, cex = 1)
```
```{r}
nrow(x)
```

```{r}
km3 <- data.frame(1:60)
z = NULL
for(y in 1:59){
  print(y)
  print(kmeans(x,y)$betweenss/kmeans(x,y)$totss)
  z <- c(z, kmeans(x,y)$betweenss/kmeans(x,y)$totss)
}
print(z)
length(z)

```


```{r}
z

```

```{r}
plot(z)

```

## Hierarchical Clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into a smaller number of clusters over time.

The main function in base R for this is called `hclust()`. This function does not take our input data directly but wants a "distance matrix" that details how dissimilar our input points are to each other.

```{r}
hc <- hclust(dist(x))
plot(hc)
abline(h = 10, col = "red")
```

The print out above is not very useful (unlike kmeans) but thers is a useful `plot()` method

```{r}
plot(hc)
```
To get my main result (my cluster membership vector) I need to "cut" my tree using function `cutree()`:

```{r}
grps <- cutree(hc, h=10)
grps
plot(x, col = grps)
```

```{r}
plot(x, col = cutree(hc, h=5))
```

# Principal Component Analysis (PCA)

The goal of PCA is to reduce 

## Data import

Read data about crazy eating trends in the UK and N. Ireland

```{r}
url <- "https://tinyurl.com/UK-foods"
x<- read.csv(url,row.names = 1)
head(x)
```

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
barplot(as.matrix(x),col=rainbow(nrow(x)))
pairs(x, col=rainbow(10), pch=16)

```

If there is a point on the diagonal that means that for that food the countries are very similar in consumption.

The paris plot is useful for small datasets but it can be a lot to interpret and gets intractable for larger datasets.

So PCA to the rescue...

The main dunction to do PCA in base R is called `prcomp()`

```{r}
pca<- (prcomp(t(x)))
summary(pca)
attributes(pca)
#prcomp(x)
```
```{r}
pca$x
```
A major PCA result viz is called a "PCA plot" (a.k.a a score plot, screen plot, biplot, PC1 v PC2 plot, ordination plot)

```{r}
mycols <- c("orange", "red","blue","darkgreen")
plot(pca$x[,1], pca$x[,2], col = mycols, xlab = "pc1", ylab = "pc2", pch = 19)
abline(h=0, col = "gray")
abline(v=0, col = "gray")
```
Another important output from PCA is called the "loadings' vector or the "rotation' component- this tells us how much the original variables (the foods in this case) contribute to new PCs.

```{r}
pca$rotation
```
PCA looks to be a super useful method for gaining some insight into high-dimensional data that is difficult to examine in other ways
